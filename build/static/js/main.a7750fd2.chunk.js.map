{"version":3,"sources":["component/ImgCord/index.js","container/App.js","serviceWorker.js","index.js"],"names":["ImgCord","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","someKey","setState","_this$props","props","alt","otherProps","objectWithoutProperties","react_default","a","createElement","assign","className","React","Component","App","getURL","obj","arguments","length","undefined","URI","baseURL","query","word","mode","start","currentPage","reqType","reqFrom","tn","toString","fetchData","jsonp","pageNumber","err","data","console","log","newImgDatas","items","allImgDatas","concat","handleDeleteImg","item","cacheImgDatas","push","imgDatas","timer","minContainerNumber","maxCacheNumber","startTimeTic","_this2","setInterval","old","currentImg","splice","left","Math","random","document","body","clientWidth","Number","thumb_width","width","delayTime","durationTime","filter","indexOf","clearInterval","_this3","map","src","thumbUrl","pic_url","top","thumb_height","height","component_ImgCord","key","title","style","animationDelay","animationDuration","onAnimationEnd","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7750fd2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.modul.css';\r\n\r\nclass ImgCord extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { someKey: 'someValue' };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ someKey: 'otherValue' });\r\n    }\r\n    render() {\r\n        let {alt,...otherProps} = this.props;\r\n        return <img className=\"img-cord\" alt={alt} {...otherProps} />;\r\n    }\r\n}\r\n\r\nexport default ImgCord;\r\n","import React, { Component } from 'react';\nimport jsonp from 'jsonp';\nimport './App.css';\nimport URI from 'urijs';\nimport ImgCord from '../component/ImgCord';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imgDatas: []\n        };\n        this.baseURL = \"https://pic.sogou.com/pics\";\n        this.pageNumber = 50;\n        this.currentPage = 0;\n        this.word = \"美女\";\n        this.timer = null;//定时器\n        this.allImgDatas = [];//所有的图片信息\n        this.minContainerNumber = 10;//最小容量\n        this.maxCacheNumber = 20;//最大缓存容量\n        this.cacheImgDatas = [];//需要删除掉的图片信息\n    }\n    getURL = (obj={})=>{\n        return URI(this.baseURL).query({\n            query:obj.word,\n            mode:1,\n            start:obj.currentPage,\n            reqType:\"ajax\",\n            reqFrom:\"result\",\n            tn:0,\n        }).toString();\n    }\n    fetchData = ()=>{\n        jsonp(this.getURL({word:this.word,pageNumber:this.pageNumber,currentPage:this.currentPage}), {},(err, data)=>{\n            console.log(data)\n            var newImgDatas = data.items||[];\n            if (newImgDatas.length === 0) {\n                this.currentPage = 0;\n            } else {\n                this.currentPage += newImgDatas.length;\n            }\n            //只是把图片信息放在所有信息容器里面\n            this.allImgDatas = this.allImgDatas.concat(newImgDatas)\n        });\n    }\n    \n    componentDidMount() {\n        //首先进来请求一下数据\n        this.fetchData();\n        //然后设置定时器\n        this.startTimeTic();\n    }\n\n    startTimeTic(){\n        this.timer = setInterval(() => {\n            this.setState((old)=>{\n                if (this.allImgDatas.length <= this.minContainerNumber) {\n                    this.fetchData();\n                }\n                if (this.allImgDatas.length > 0) {\n                    let currentImg = this.allImgDatas.splice(0,1)[0];\n                    currentImg.left = Math.random() * (document.body.clientWidth - Number(currentImg.thumb_width||currentImg.width));\n                    currentImg.delayTime = Math.random() * 3;\n                    currentImg.durationTime = Math.random() * 5 + 3;\n                    old.imgDatas.push(currentImg);//每次拿最前面的一个\n                }\n                //清空缓存数据\n                if (this.cacheImgDatas.length > this.maxCacheNumber) {\n                    debugger;\n                    old.imgDatas = old.imgDatas.filter((item)=>{\n                        return !~this.cacheImgDatas.indexOf(item);\n                    })\n                    this.cacheImgDatas = [];\n                }\n                return old;\n            })\n        }, 1500);\n    }\n    \n    componentWillUnmount() {\n        clearInterval(this.timer)\n    }\n    \n    \n\n    handleDeleteImg = (item)=>{\n        //放入要删除的缓存中\n        this.cacheImgDatas.push(item)\n    }\n\n    render() {\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"center\">\n                    <div className=\"dialogue-text hinge\">一大波美女正在靠近</div>\n                </div>\n                {this.state.imgDatas.map((item)=>{\n                    let src = item.thumbUrl || item.pic_url;\n                    if (!src) {\n                        return null;\n                    }\n                    let top = item.thumb_height || item.height;\n                    return (\n                        <ImgCord \n                            key={src} \n                            src={src} \n                            alt={item.alt} \n                            title={item.title} \n                            style={{top:-top,left:item.left+\"px\",animationDelay: item.delayTime+\"s\",animationDuration:item.durationTime+\"s\"}}\n                            onAnimationEnd={this.handleDeleteImg.bind(this,item)}\n                            />\n                    )\n                })}\n            </header>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}